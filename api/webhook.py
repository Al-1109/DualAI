from http.server import BaseHTTPRequestHandler
import json
import os
import requests
import traceback
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("webhook")

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TEST_TELEGRAM_BOT_TOKEN')
WEBHOOK_SECRET = os.environ.get('TEST_WEBHOOK_SECRET')

if not TELEGRAM_BOT_TOKEN:
    logger.warning("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é fallback —Ç–æ–∫–µ–Ω")
    TELEGRAM_BOT_TOKEN = "7513434644:AAECYxIDIkmZRjGgUDrP8ur2cZIni53Qy0E"  # Fallback —Ç–æ–∫–µ–Ω

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ webhook secret
if not WEBHOOK_SECRET:
    logger.warning("WEBHOOK_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Telegram API
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

def send_telegram_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram API."""
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ {chat_id}: {text[:50]}...")
        response = requests.post(url, json=payload)
        
        if response.status_code == 200:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, chat_id: {chat_id}")
            return {"ok": True, "response": response.json()}
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {response.status_code}, {response.text}")
            return {"ok": False, "error": f"API error: {response.status_code}"}
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        logger.debug(traceback.format_exc())
        return {"ok": False, "error": str(e)}

class handler(BaseHTTPRequestHandler):
    def _set_headers(self, status_code=200):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞."""
        self.send_response(status_code)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
    
    def _send_json_response(self, data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON-–æ—Ç–≤–µ—Ç."""
        self.wfile.write(json.dumps(data).encode())
    
    def _verify_telegram_webhook(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram."""
        if not WEBHOOK_SECRET:
            logger.warning("–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞: WEBHOOK_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        secret_header = self.headers.get('X-Telegram-Bot-Api-Secret-Token')
        
        if not secret_header:
            logger.warning("–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-Bot-Api-Secret-Token")
            return False
            
        return secret_header == WEBHOOK_SECRET
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
        self._set_headers()
        
        response_data = {
            'status': 'ok',
            'message': 'Webhook –∞–∫—Ç–∏–≤–µ–Ω',
            'timestamp': str(datetime.now()),
            'version': '1.1.0'
        }
        
        self._send_json_response(response_data)
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram."""
        try:
            # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
            if not self._verify_telegram_webhook():
                logger.warning("–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
                self._set_headers(403)
                self._send_json_response({'ok': False, 'error': 'Forbidden'})
                return
                
            # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º Telegram, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self._set_headers()
            self._send_json_response({'ok': True})
            
            # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            update = json.loads(post_data.decode('utf-8'))
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID: {update.get('update_id')}")
            logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {json.dumps(update)}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if 'message' in update and 'text' in update['message']:
                chat_id = update['message']['chat']['id']
                text = update['message']['text']
                user = update['message']['from'].get('first_name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user} ({chat_id}): {text}")
                
                if text == '/start':
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    keyboard = {
                        "inline_keyboard": [
                            [{"text": "–û –±–æ—Ç–µ", "callback_data": "info"}],
                            [{"text": "–¢–µ—Å—Ç", "callback_data": "test"}]
                        ]
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                    send_telegram_message(
                        chat_id, 
                        f"üëã –ü—Ä–∏–≤–µ—Ç, {user}!\n\n–Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ DualAI –Ω–∞ Vercel.\n–Ø –∏—Å–ø–æ–ª—å–∑—É—é webhook-–ø–æ–¥—Ö–æ–¥.",
                        keyboard
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ö–æ
                    send_telegram_message(chat_id, f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
            elif 'callback_query' in update:
                callback = update['callback_query']
                chat_id = callback['message']['chat']['id']
                data = callback['data']
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω callback —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
                
                if data == 'info':
                    send_telegram_message(chat_id, "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ DualAI –Ω–∞ Vercel —á–µ—Ä–µ–∑ webhook.")
                elif data == 'test':
                    send_telegram_message(chat_id, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                else:
                    send_telegram_message(chat_id, f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {data}")
            
            return
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            logger.debug(traceback.format_exc())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
            self._set_headers(500)
            self._send_json_response({'ok': False, 'error': str(e)})
            return 