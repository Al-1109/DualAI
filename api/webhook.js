// webhook.js - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram webhook –¥–ª—è Vercel API routes
const https = require('https');

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TEST_TELEGRAM_BOT_TOKEN;
const WEBHOOK_SECRET = process.env.TEST_WEBHOOK_SECRET || 'DualAI_Webhook_Secret_2025'; // –î–æ–±–∞–≤–ª—è–µ–º fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Telegram API
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
function log(level, message) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] [${level}] ${message}`);
}

// –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ Telegram API
async function makeRequest(method, params) {
  return new Promise((resolve, reject) => {
    const data = JSON.stringify(params);
    
    const options = {
      hostname: 'api.telegram.org',
      port: 443,
      path: `/bot${TELEGRAM_BOT_TOKEN}/${method}`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    };
    
    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode === 200) {
          log('INFO', `–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å ${method}`);
          resolve({ ok: true, response: JSON.parse(responseData) });
        } else {
          log('ERROR', `–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ${method}: ${res.statusCode}, ${responseData}`);
          resolve({ ok: false, error: `API error: ${res.statusCode}` });
        }
      });
    });
    
    req.on('error', (error) => {
      log('ERROR', `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ${method}: ${error.message}`);
      reject({ ok: false, error: error.message });
    });
    
    req.write(data);
    req.end();
  });
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram API
async function sendTelegramMessage(chat_id, text, reply_markup = null, silent = false) {
  const payload = {
    chat_id: chat_id,
    text: text,
    parse_mode: "Markdown"
  };
  
  if (reply_markup) {
    payload.reply_markup = reply_markup;
  }
  
  // –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–ª–∞–≥ silent = true
  if (silent) {
    payload.disable_notification = true;
  }
  
  log('INFO', `–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ ${chat_id}: ${text.substring(0, 50)}...`);
  
  return makeRequest('sendMessage', payload);
}

// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
async function editMessage(chat_id, message_id, text, reply_markup = null) {
  const payload = {
    chat_id: chat_id,
    message_id: message_id,
    text: text,
    parse_mode: "Markdown"
  };
  
  if (reply_markup) {
    payload.reply_markup = reply_markup;
  }
  
  log('INFO', `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: chat_id=${chat_id}, message_id=${message_id}`);
  
  return makeRequest('editMessageText', payload);
}

// –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
async function deleteMessage(chat_id, message_id) {
  const payload = {
    chat_id: chat_id,
    message_id: message_id
  };
  
  log('INFO', `–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: chat_id=${chat_id}, message_id=${message_id}`);
  
  return makeRequest('deleteMessage', payload);
}

// –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
async function deleteMessages(chat_id, messages_ids) {
  log('INFO', `–£–¥–∞–ª–µ–Ω–∏–µ ${messages_ids.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ ${chat_id}`);
  
  for (const message_id of messages_ids) {
    try {
      await deleteMessage(chat_id, message_id);
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 50)); 
    } catch (error) {
      log('ERROR', `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${message_id}: ${error.message}`);
    }
  }
}

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
const chatLastMessages = {};

// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
function saveLastMessageId(chat_id, message_id) {
  if (!chatLastMessages[chat_id]) {
    chatLastMessages[chat_id] = [];
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è
  chatLastMessages[chat_id].push(message_id);
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –¥–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (chatLastMessages[chat_id].length > 5) {
    chatLastMessages[chat_id].shift();
  }
  
  log('INFO', `–°–æ—Ö—Ä–∞–Ω–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è ${message_id} –¥–ª—è —á–∞—Ç–∞ ${chat_id}. –í—Å–µ–≥–æ: ${chatLastMessages[chat_id].length}`);
}

// –ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
function getLastMessageIds(chat_id) {
  return chatLastMessages[chat_id] || [];
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function sendMainMenu(chat_id, user, cleanup = false) {
  // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (cleanup) {
    const messageIds = getLastMessageIds(chat_id);
    if (messageIds.length > 0) {
      await deleteMessages(chat_id, messageIds);
      // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      chatLastMessages[chat_id] = [];
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
  const keyboard = {
    "inline_keyboard": [
      [{"text": "üìã –û –ø—Ä–æ–µ–∫—Ç–µ", "callback_data": "about"}],
      [{"text": "üõ†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "callback_data": "features"}],
      [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats"}],
      [{"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"}]
    ]
  };
  
  const menuText = `# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user}! üëã\n\n` +
    `–≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é DualAI –±–æ—Ç–∞.\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.`;
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏—Ö–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
  const result = await sendTelegramMessage(chat_id, menuText, keyboard, true);
  
  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
  if (result.ok && result.response.result) {
    saveLastMessageId(chat_id, result.response.result.message_id);
  }
  
  return result;
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
async function sendNewMessage(chat_id, text, keyboard) {
  // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const messageIds = getLastMessageIds(chat_id);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–∏—Ö–æ–µ)
  const result = await sendTelegramMessage(chat_id, text, keyboard, true);
  
  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
  if (result.ok && result.response.result) {
    const newMessageId = result.response.result.message_id;
    saveLastMessageId(chat_id, newMessageId);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (messageIds.length > 0) {
      await deleteMessages(chat_id, messageIds);
      // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ
      chatLastMessages[chat_id] = [newMessageId];
    }
  }
  
  return result;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Vercel API routes
export default async function handler(req, res) {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    log('INFO', `–ü–æ–ª—É—á–µ–Ω ${req.method} –∑–∞–ø—Ä–æ—Å –Ω–∞ webhook`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    if (req.method === 'GET') {
      return res.status(200).json({
        status: 'ok',
        message: 'Webhook –∞–∫—Ç–∏–≤–µ–Ω',
        timestamp: new Date().toISOString(),
        version: '1.6.0'
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram
    if (req.method === 'POST') {
      // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram
      const secretHeader = req.headers['x-telegram-bot-api-secret-token'];
      
      log('INFO', `–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞: –ø–æ–ª—É—á–µ–Ω–Ω—ã–π=${secretHeader}, –æ–∂–∏–¥–∞–µ–º—ã–π=${WEBHOOK_SECRET}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
      const update = req.body;
      log('INFO', `–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${JSON.stringify(update)}`);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (update.message && update.message.text) {
        const chat_id = update.message.chat.id;
        const text = update.message.text;
        const user = update.message.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        log('INFO', `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user} (${chat_id}): ${text}`);
        
        if (text === '/start' || text === '/menu') {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—á–∏—Å—Ç–∫–æ–π
          await sendMainMenu(chat_id, user, true);
        } else if (text === '/clean') {
          // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
          const messageIds = getLastMessageIds(chat_id);
          if (messageIds.length > 0) {
            await deleteMessages(chat_id, messageIds);
            chatLastMessages[chat_id] = [];
          }
          
          await sendTelegramMessage(chat_id, "–ß–∞—Ç –æ—á–∏—â–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.");
        } else {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ö–æ
          await sendTelegramMessage(chat_id, `–í—ã —Å–∫–∞–∑–∞–ª–∏: ${text}`);
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
      else if (update.callback_query) {
        const callback = update.callback_query;
        const chat_id = callback.message.chat.id;
        const data = callback.data;
        const user = callback.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        log('INFO', `–ü–æ–ª—É—á–µ–Ω callback —Å –¥–∞–Ω–Ω—ã–º–∏: ${data}`);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if (data === 'about') {
          const aboutKeyboard = {
            "inline_keyboard": [
              [{"text": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "menu"}]
            ]
          };
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
          await sendNewMessage(
            chat_id,
            `# –û –ø—Ä–æ–µ–∫—Ç–µ DualAI üöÄ\n\n` +
            `DualAI - —ç—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Vercel –∏ webhook API.\n\n` +
            `–í–µ—Ä—Å–∏—è: 1.6.0\n` +
            `–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Vercel\n` +
            `–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Node.js, JavaScript`,
            aboutKeyboard
          );
        } 
        else if (data === 'features') {
          const featuresKeyboard = {
            "inline_keyboard": [
              [{"text": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "menu"}]
            ]
          };
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
          await sendNewMessage(
            chat_id,
            `# –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ üõ†Ô∏è\n\n` +
            `- –°—Ç–∞—Ç–∏—á–Ω–æ–µ –º–µ–Ω—é —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π\n` +
            `- –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –∑–∞–ø—Ä–æ—Å–æ–≤\n` +
            `- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n` +
            `- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n` +
            `- –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –º–µ–Ω—é\n`,
            featuresKeyboard
          );
        }
        else if (data === 'stats') {
          const statsKeyboard = {
            "inline_keyboard": [
              [{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": "stats"}],
              [{"text": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "menu"}]
            ]
          };
          
          const now = new Date();
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
          await sendNewMessage(
            chat_id,
            `# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä\n\n` +
            `üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toISOString()}\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user}\n` +
            `üÜî ID —á–∞—Ç–∞: ${chat_id}\n` +
            `üåê Webhook: –ê–∫—Ç–∏–≤–µ–Ω\n`,
            statsKeyboard
          );
        }
        else if (data === 'help') {
          const helpKeyboard = {
            "inline_keyboard": [
              [{"text": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "menu"}]
            ]
          };
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
          await sendNewMessage(
            chat_id,
            `# –ü–æ–º–æ—â—å ‚ùì\n\n` +
            `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
            `/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n` +
            `/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n` +
            `/clean - –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç\n\n` +
            `–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è.`,
            helpKeyboard
          );
        }
        else if (data === 'menu') {
          // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ)
          await sendMainMenu(chat_id, user, false);
        }
        else {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
          const backKeyboard = {
            "inline_keyboard": [
              [{"text": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "menu"}]
            ]
          };
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
          await sendNewMessage(
            chat_id,
            `–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${data}`,
            backKeyboard
          );
        }
      }
      
      // –û—Ç–≤–µ—á–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
      return res.status(200).json({ ok: true });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö HTTP –º–µ—Ç–æ–¥–æ–≤
    return res.status(405).json({
      ok: false,
      error: 'Method not allowed'
    });
    
  } catch (error) {
    log('ERROR', `–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: ${error.message}`);
    console.error(error.stack);
    
    return res.status(500).json({
      ok: false,
      error: error.message
    });
  }
} 