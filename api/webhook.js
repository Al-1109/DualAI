// webhook.js - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram webhook –¥–ª—è Vercel API routes
const https = require('https');

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TEST_TELEGRAM_BOT_TOKEN;
const WEBHOOK_SECRET = process.env.TEST_WEBHOOK_SECRET;

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Telegram API
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
function log(level, message) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] [${level}] ${message}`);
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram API
async function sendTelegramMessage(chat_id, text, reply_markup = null) {
  return new Promise((resolve, reject) => {
    const payload = {
      chat_id: chat_id,
      text: text,
      parse_mode: "Markdown"
    };
    
    if (reply_markup) {
      payload.reply_markup = reply_markup;
    }
    
    const data = JSON.stringify(payload);
    
    log('INFO', `–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ ${chat_id}: ${text.substring(0, 50)}...`);
    
    const options = {
      hostname: 'api.telegram.org',
      port: 443,
      path: `/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    };
    
    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode === 200) {
          log('INFO', `–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, chat_id: ${chat_id}`);
          resolve({ ok: true, response: JSON.parse(responseData) });
        } else {
          log('ERROR', `–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${res.statusCode}, ${responseData}`);
          resolve({ ok: false, error: `API error: ${res.statusCode}` });
        }
      });
    });
    
    req.on('error', (error) => {
      log('ERROR', `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
      reject({ ok: false, error: error.message });
    });
    
    req.write(data);
    req.end();
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Vercel API routes
export default async function handler(req, res) {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    log('INFO', `–ü–æ–ª—É—á–µ–Ω ${req.method} –∑–∞–ø—Ä–æ—Å –Ω–∞ webhook`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    if (req.method === 'GET') {
      return res.status(200).json({
        status: 'ok',
        message: 'Webhook –∞–∫—Ç–∏–≤–µ–Ω',
        timestamp: new Date().toISOString(),
        version: '1.3.0'
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram
    if (req.method === 'POST') {
      // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram
      const secretHeader = req.headers['x-telegram-bot-api-secret-token'];
      
      if (WEBHOOK_SECRET && secretHeader !== WEBHOOK_SECRET) {
        log('WARNING', "–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å");
        return res.status(403).json({
          ok: false,
          error: 'Forbidden'
        });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
      const update = req.body;
      log('INFO', `–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID: ${update.update_id}`);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (update.message && update.message.text) {
        const chat_id = update.message.chat.id;
        const text = update.message.text;
        const user = update.message.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        log('INFO', `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user} (${chat_id}): ${text}`);
        
        if (text === '/start') {
          // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
          const keyboard = {
            "inline_keyboard": [
              [{"text": "–û –±–æ—Ç–µ", "callback_data": "info"}],
              [{"text": "–¢–µ—Å—Ç", "callback_data": "test"}]
            ]
          };
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
          await sendTelegramMessage(
            chat_id, 
            `üëã –ü—Ä–∏–≤–µ—Ç, ${user}!\n\n–Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ DualAI –Ω–∞ Vercel.\n–Ø –∏—Å–ø–æ–ª—å–∑—É—é webhook-–ø–æ–¥—Ö–æ–¥.`,
            keyboard
          );
        } else {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ö–æ
          await sendTelegramMessage(chat_id, `–í—ã —Å–∫–∞–∑–∞–ª–∏: ${text}`);
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
      else if (update.callback_query) {
        const callback = update.callback_query;
        const chat_id = callback.message.chat.id;
        const data = callback.data;
        
        log('INFO', `–ü–æ–ª—É—á–µ–Ω callback —Å –¥–∞–Ω–Ω—ã–º–∏: ${data}`);
        
        if (data === 'info') {
          await sendTelegramMessage(chat_id, "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ DualAI –Ω–∞ Vercel —á–µ—Ä–µ–∑ webhook.");
        } else if (data === 'test') {
          await sendTelegramMessage(chat_id, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç!");
        } else {
          await sendTelegramMessage(chat_id, `–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${data}`);
        }
      }
      
      // –û—Ç–≤–µ—á–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
      return res.status(200).json({ ok: true });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö HTTP –º–µ—Ç–æ–¥–æ–≤
    return res.status(405).json({
      ok: false,
      error: 'Method not allowed'
    });
    
  } catch (error) {
    log('ERROR', `–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: ${error.message}`);
    console.error(error.stack);
    
    return res.status(500).json({
      ok: false,
      error: error.message
    });
  }
} 