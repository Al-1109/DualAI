import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ utils
from utils import load_content_file

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram)
# –í –±—É–¥—É—â–µ–º —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ë–î
ADMIN_IDS = [8178580481]  # ID –±–æ—Ç–∞

async def admin_panel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language = context.user_data.get('language', 'en')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'production')
    environment = context.user_data.get('environment', 'production')
    
    # –¢–µ–∫—Å—Ç—ã –ø–∞–Ω–µ–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    panel_title = {
        'en': "‚öôÔ∏è Administrative Panel",
        'es': "‚öôÔ∏è Panel de Administraci√≥n",
        'de': "‚öôÔ∏è Administrationsbereich",
        'fr': "‚öôÔ∏è Panneau d'Administration",
        'ru': "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    }
    
    env_status = {
        'en': f"Current Environment: {'PRODUCTION' if environment == 'production' else 'DEVELOPMENT'}",
        'es': f"Entorno Actual: {'PRODUCCI√ìN' if environment == 'production' else 'DESARROLLO'}",
        'de': f"Aktuelle Umgebung: {'PRODUKTION' if environment == 'production' else 'ENTWICKLUNG'}",
        'fr': f"Environnement Actuel: {'PRODUCTION' if environment == 'production' else 'D√âVELOPPEMENT'}",
        'ru': f"–¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {'–ü–†–û–î–ê–ö–®–ù' if environment == 'production' else '–†–ê–ó–†–ê–ë–û–¢–ö–ê'}"
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    message = f"{panel_title.get(language, '‚öôÔ∏è Administrative Panel')}\n\n{env_status.get(language, '')}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    # –ù–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    button_texts = {
        'content': {
            'en': "üìù Content Management",
            'es': "üìù Gesti√≥n de Contenido",
            'de': "üìù Inhaltsverwaltung",
            'fr': "üìù Gestion de Contenu",
            'ru': "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ö–æ–Ω—Ç–µ–Ω—Ç–æ–º"
        },
        'stats': {
            'en': "üìä Statistics",
            'es': "üìä Estad√≠sticas",
            'de': "üìä Statistiken",
            'fr': "üìä Statistiques",
            'ru': "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        },
        'notifications': {
            'en': "üîî Notifications",
            'es': "üîî Notificaciones",
            'de': "üîî Benachrichtigungen",
            'fr': "üîî Notifications",
            'ru': "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        },
        'switch_env': {
            'en': "üîÑ Switch to " + ("DEVELOPMENT" if environment == 'production' else "PRODUCTION"),
            'es': "üîÑ Cambiar a " + ("DESARROLLO" if environment == 'production' else "PRODUCCI√ìN"),
            'de': "üîÑ Wechseln zu " + ("ENTWICKLUNG" if environment == 'production' else "PRODUKTION"),
            'fr': "üîÑ Passer √† " + ("D√âVELOPPEMENT" if environment == 'production' else "PRODUCTION"),
            'ru': "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ " + ("–†–ê–ó–†–ê–ë–û–¢–ö–£" if environment == 'production' else "–ü–†–û–î–ê–ö–®–ù")
        },
        'back': {
            'en': "üîô Back to Main Menu",
            'es': "üîô Volver al Men√∫ Principal",
            'de': "üîô Zur√ºck zum Hauptmen√º",
            'fr': "üîô Retour au Menu Principal",
            'ru': "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é"
        }
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton(button_texts['content'].get(language, button_texts['content']['en']), 
                             callback_data="admin_content")],
        [InlineKeyboardButton(button_texts['stats'].get(language, button_texts['stats']['en']), 
                             callback_data="admin_stats")],
        [InlineKeyboardButton(button_texts['notifications'].get(language, button_texts['notifications']['en']), 
                             callback_data="admin_notifications")],
        [InlineKeyboardButton(button_texts['switch_env'].get(language, button_texts['switch_env']['en']), 
                             callback_data="admin_switch_env")],
        [InlineKeyboardButton(button_texts['back'].get(language, button_texts['back']['en']), 
                             callback_data="admin_back_to_main")]
    ]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['current_page'] = 'admin_panel'

async def admin_switch_environment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ä–µ–¥–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥–∞–∫—à–Ω."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –µ–≥–æ
    current_env = context.user_data.get('environment', 'production')
    new_env = 'development' if current_env == 'production' else 'production'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    context.user_data['environment'] = new_env
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–æ–Ω–∞ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç –Ω–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ)
    await admin_panel_callback(update, context)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å {current_env} –Ω–∞ {new_env}")

async def admin_back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language = context.user_data.get('language', 'en')
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é show_main_menu –∏–∑ client.py
    from handlers.client import show_main_menu
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(query, context, language)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
async def admin_content_management(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language = context.user_data.get('language', 'en')
    
    # –¢–µ–∫—Å—Ç—ã –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    message = {
        'en': "Content Management will be available soon.",
        'es': "La gesti√≥n de contenido estar√° disponible pronto.",
        'de': "Inhaltsverwaltung wird in K√ºrze verf√ºgbar sein.",
        'fr': "La gestion de contenu sera bient√¥t disponible.",
        'ru': "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    }
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_text = {
        'en': "üîô Back to Admin Panel",
        'es': "üîô Volver al Panel de Administraci√≥n",
        'de': "üîô Zur√ºck zum Admin-Panel",
        'fr': "üîô Retour au Panneau d'Administration",
        'ru': "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    }
    
    keyboard = [[InlineKeyboardButton(
        back_text.get(language, back_text['en']), 
        callback_data="admin_panel"
    )]]
    
    await query.edit_message_text(
        text=message.get(language, message['en']),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def admin_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language = context.user_data.get('language', 'en')
    
    # –¢–µ–∫—Å—Ç—ã –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    message = {
        'en': "Statistics will be available soon.",
        'es': "Las estad√≠sticas estar√°n disponibles pronto.",
        'de': "Statistiken werden in K√ºrze verf√ºgbar sein.",
        'fr': "Les statistiques seront bient√¥t disponibles.",
        'ru': "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    }
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_text = {
        'en': "üîô Back to Admin Panel",
        'es': "üîô Volver al Panel de Administraci√≥n",
        'de': "üîô Zur√ºck zum Admin-Panel",
        'fr': "üîô Retour au Panneau d'Administration",
        'ru': "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    }
    
    keyboard = [[InlineKeyboardButton(
        back_text.get(language, back_text['en']), 
        callback_data="admin_panel"
    )]]
    
    await query.edit_message_text(
        text=message.get(language, message['en']),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def admin_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language = context.user_data.get('language', 'en')
    
    # –¢–µ–∫—Å—Ç—ã –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    message = {
        'en': "Notification management will be available soon.",
        'es': "La gesti√≥n de notificaciones estar√° disponible pronto.",
        'de': "Benachrichtigungsverwaltung wird in K√ºrze verf√ºgbar sein.",
        'fr': "La gestion des notifications sera bient√¥t disponible.",
        'ru': "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    }
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_text = {
        'en': "üîô Back to Admin Panel",
        'es': "üîô Volver al Panel de Administraci√≥n",
        'de': "üîô Zur√ºck zum Admin-Panel",
        'fr': "üîô Retour au Panneau d'Administration",
        'ru': "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    }
    
    keyboard = [[InlineKeyboardButton(
        back_text.get(language, back_text['en']), 
        callback_data="admin_panel"
    )]]
    
    await query.edit_message_text(
        text=message.get(language, message['en']),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )