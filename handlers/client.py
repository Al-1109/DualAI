import os
import logging
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ utils
from utils import (
    send_to_channel, 
    CHANNEL_ID, 
    load_content_file, 
    save_message_ids, 
    load_message_ids,
    clean_all_channel_messages,
    send_photo_to_channel
)

# –ò–º–ø–æ—Ä—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
from handlers.admin import ADMIN_IDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—É—Ç–µ–π
WELCOME_IMAGE_PATH = "media/images/photo.jpg"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
def create_language_buttons():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    return [
        [
            InlineKeyboardButton("üá¨üáß", callback_data="lang_en_current"),
            InlineKeyboardButton("üá™üá∏", callback_data="lang_es_current"),
            InlineKeyboardButton("üá©üá™", callback_data="lang_de_current"),
            InlineKeyboardButton("üá´üá∑", callback_data="lang_fr_current"),
            InlineKeyboardButton("üá∑üá∫", callback_data="lang_ru_current"),
        ]
    ]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
def create_menu_keyboard(language, is_admin=False):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        language (str): –ö–æ–¥ —è–∑—ã–∫–∞ ('en', 'ru', 'es', 'de', 'fr')
        is_admin (bool): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    if language == 'en':
        keyboard = [
            [InlineKeyboardButton("üè† Properties", callback_data="menu_properties")],
            [InlineKeyboardButton("üìù Contact us", callback_data="menu_contact")],
            [InlineKeyboardButton("‚ùì FAQ", callback_data="menu_faq")],
            [InlineKeyboardButton("üì∞ News", callback_data="menu_news")],
        ]
    elif language == 'es':
        keyboard = [
            [InlineKeyboardButton("üè† Propiedades", callback_data="menu_properties")],
            [InlineKeyboardButton("üìù Cont√°ctenos", callback_data="menu_contact")],
            [InlineKeyboardButton("‚ùì FAQ", callback_data="menu_faq")],
            [InlineKeyboardButton("üì∞ Noticias", callback_data="menu_news")],
        ]
    elif language == 'de':
        keyboard = [
            [InlineKeyboardButton("üè† Immobilien", callback_data="menu_properties")],
            [InlineKeyboardButton("üìù Kontakt", callback_data="menu_contact")],
            [InlineKeyboardButton("‚ùì FAQ", callback_data="menu_faq")],
            [InlineKeyboardButton("üì∞ Nachrichten", callback_data="menu_news")],
        ]
    elif language == 'fr':
        keyboard = [
            [InlineKeyboardButton("üè† Propri√©t√©s", callback_data="menu_properties")],
            [InlineKeyboardButton("üìù Contactez-nous", callback_data="menu_contact")],
            [InlineKeyboardButton("‚ùì FAQ", callback_data="menu_faq")],
            [InlineKeyboardButton("üì∞ Actualit√©s", callback_data="menu_news")],
        ]
    elif language == 'ru':
        keyboard = [
            [InlineKeyboardButton("üè† –û–±—ä–µ–∫—Ç—ã", callback_data="menu_properties")],
            [InlineKeyboardButton("üìù –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="menu_contact")],
            [InlineKeyboardButton("‚ùì FAQ", callback_data="menu_faq")],
            [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="menu_news")],
        ]
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        keyboard = [
            [InlineKeyboardButton("üè† Properties", callback_data="menu_properties")],
            [InlineKeyboardButton("üìù Contact us", callback_data="menu_contact")],
            [InlineKeyboardButton("‚ùì FAQ", callback_data="menu_faq")],
            [InlineKeyboardButton("üì∞ News", callback_data="menu_news")],
        ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_admin:
        admin_button_text = {
            'en': "‚öôÔ∏è Admin Panel",
            'es': "‚öôÔ∏è Panel de Administraci√≥n",
            'de': "‚öôÔ∏è Admin-Panel",
            'fr': "‚öôÔ∏è Panneau d'Administration",
            'ru': "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        keyboard.append([InlineKeyboardButton(
            admin_button_text.get(language, "‚öôÔ∏è Admin Panel"), 
            callback_data="admin_panel"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å –º–µ–Ω—é
    keyboard.extend(create_language_buttons())
    
    return keyboard

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —è–∑—ã–∫–∞.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start lang_ru)
    args = context.args
    language = 'en'  # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if args and args[0].startswith('lang_'):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        language = args[0].split('_')[1]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'ru' –∏–∑ 'lang_ru'
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['language'] = language
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —è–∑—ã–∫: {language} —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä /start")
    else:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        language = context.user_data.get('language', 'en')
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = user_id in ADMIN_IDS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['is_admin'] = is_admin
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'production')
    if 'environment' not in context.user_data:
        context.user_data['environment'] = 'production'
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    menu_content = load_content_file(f"Telegram_content/{language}/main_menu.md")
    keyboard = create_menu_keyboard(language, is_admin)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['current_page'] = 'main_menu'
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –ø–æ–¥–ø–∏—Å–∏
        with open(WELCOME_IMAGE_PATH, "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=menu_content,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            text=menu_content,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )

async def send_welcome_to_channel(context):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö.
    –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.
    """
    logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É...")
    welcome_message = load_content_file("Telegram_content/welcome_message.md")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    bot_username = context.bot.username
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
    keyboard = [
        [
            InlineKeyboardButton("üá¨üáß Start in English", url=f"https://t.me/{bot_username}?start=lang_en"),
            InlineKeyboardButton("üá™üá∏ Comenzar en Espa√±ol", url=f"https://t.me/{bot_username}?start=lang_es"),
        ],
        [
            InlineKeyboardButton("üá©üá™ Auf Deutsch starten", url=f"https://t.me/{bot_username}?start=lang_de"),
            InlineKeyboardButton("üá´üá∑ Commencer en Fran√ßais", url=f"https://t.me/{bot_username}?start=lang_fr"),
        ],
        [
            InlineKeyboardButton("üá∑üá∫ –ù–∞—á–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º", url=f"https://t.me/{bot_username}?start=lang_ru"),
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_ids = load_message_ids()
    pinned_message_id = message_ids.get("pinned_welcome")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if pinned_message_id:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if "welcome_has_photo" in message_ids and message_ids["welcome_has_photo"]:
                    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
                    await context.bot.edit_message_caption(
                        chat_id=CHANNEL_ID,
                        message_id=pinned_message_id,
                        caption=welcome_message,
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {pinned_message_id}")
                    return pinned_message_id
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    await context.bot.edit_message_text(
                        chat_id=CHANNEL_ID,
                        message_id=pinned_message_id,
                        text=welcome_message,
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {pinned_message_id}")
                    return pinned_message_id
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            with open(WELCOME_IMAGE_PATH, "rb") as photo:
                message = await context.bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=photo,
                    caption=welcome_message,
                    reply_markup=reply_markup,
                    parse_mode="Markdown",
                    disable_notification=True
                )
                
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
                message_ids["welcome_has_photo"] = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=welcome_message,
                reply_markup=reply_markup,
                parse_mode="Markdown",
                disable_notification=True
            )
            message_ids["welcome_has_photo"] = False
        
        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.pin_chat_message(
            chat_id=CHANNEL_ID,
            message_id=message.message_id,
            disable_notification=True
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_ids["pinned_welcome"] = message.message_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if "all_messages" not in message_ids:
            message_ids["all_messages"] = []
        
        if message.message_id not in message_ids["all_messages"]:
            message_ids["all_messages"].append(message.message_id)
        
        save_message_ids(message_ids)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞, –∫—Ä–æ–º–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ
        # –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π pin, –∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        if not pinned_message_id or pinned_message_id != message.message_id:
            await clean_all_channel_messages(context, message.message_id, True)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: {message.message_id})")
        return message.message_id
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {e}")
        return None

# –ù–û–í–ê–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–°–ï–• –¢–ò–ü–û–í –ü–ï–†–ï–•–û–î–û–í
async def send_menu_update(context, chat_id, old_message_id, content, keyboard, message_key, use_photo=False):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –±–µ–∑ –º–µ—Ä—Ü–∞–Ω–∏—è –¥–ª—è Android –∏ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ "—Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å" —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏.
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
        old_message_id: ID —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_key: –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è
        use_photo: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ (True) –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (False)
    """
    message_ids = load_message_ids()
    reply_markup = InlineKeyboardMarkup(keyboard)
    new_message = None
    
    try:
        # 1. –°–ù–ê–ß–ê–õ–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if use_photo:
            with open(WELCOME_IMAGE_PATH, "rb") as photo_file:
                new_message = await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo_file,
                    caption=content,
                    reply_markup=reply_markup,
                    parse_mode="Markdown",
                    disable_notification=True
                )
        else:
            new_message = await context.bot.send_message(
                chat_id=chat_id,
                text=content,
                reply_markup=reply_markup,
                parse_mode="Markdown",
                disable_notification=True
            )
        
        # 2. –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if new_message:
            new_message_id = new_message.message_id
            message_ids[message_key] = new_message_id
            
            if "all_messages" not in message_ids:
                message_ids["all_messages"] = []
            
            if new_message_id not in message_ids["all_messages"]:
                message_ids["all_messages"].append(new_message_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
            save_message_ids(message_ids)
        
        # 3. –¢–û–õ–¨–ö–û –ü–û–°–õ–ï —ç—Ç–æ–≥–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if old_message_id and new_message and old_message_id != new_message.message_id:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.delete_message(
                    chat_id=chat_id,
                    message_id=old_message_id
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                if old_message_id in message_ids.get("all_messages", []):
                    message_ids["all_messages"].remove(old_message_id)
                    save_message_ids(message_ids)
            except Exception as e:
                # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è —Ä–∞–±–æ—Ç—É
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {old_message_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é: {e}")
    
    return new_message

async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    query = update.callback_query
    await query.answer()  # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ —Ä–µ–∂–∏–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
    callback_parts = query.data.split('_')
    language = callback_parts[1]
    mode = callback_parts[2] if len(callback_parts) > 2 else 'main'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['language'] = language
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_page = context.user_data.get('current_page', 'welcome')
    
    # –ï—Å–ª–∏ —Ä–µ–∂–∏–º 'current', —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if mode == 'current':
        # –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø–æ–¥–º–µ–Ω—é, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if current_page in ['properties', 'contact', 'faq', 'news']:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
            await show_submenu_page(query, context, current_page, language)
            return
    
    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(query, context, language)

async def show_main_menu(query, context, language):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_content = load_content_file(f"Telegram_content/{language}/main_menu.md")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = context.user_data.get('is_admin', False)
    
    keyboard = create_menu_keyboard(language, is_admin)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    context.user_data['current_page'] = 'main_menu'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
    is_channel = query.message.chat.type == 'channel' or (
        query.message.chat.username and CHANNEL_ID.replace("@", "") == query.message.chat.username
    )
    
    if is_channel:
        # –î–ª—è –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å —Ñ–æ—Ç–æ
        message_key = f"main_menu_{language}"
        chat_id = CHANNEL_ID
        old_message_id = query.message.message_id
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (–≤—Å–µ–≥–¥–∞ —Å —Ñ–æ—Ç–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
        await send_menu_update(
            context=context,
            chat_id=chat_id,
            old_message_id=old_message_id,
            content=menu_content,
            keyboard=keyboard,
            message_key=message_key,
            use_photo=True  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—Å–µ–≥–¥–∞ —Å —Ñ–æ—Ç–æ
        )
    else:
        # –≠—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
            with open(WELCOME_IMAGE_PATH, "rb") as photo:
                new_message = await query.message.reply_photo(
                    photo=photo,
                    caption=menu_content,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
            await query.message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ: {e}")
            try:
                await query.edit_message_text(
                    text=menu_content,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
            except Exception:
                await query.message.reply_text(
                    text=menu_content,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )

async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()  # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    menu_item = query.data.split('_')[1]
    language = context.user_data.get('language', 'en')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['current_page'] = menu_item
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_submenu_page(query, context, menu_item, language)

async def show_submenu_page(query, context, page, language):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ."""
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
    messages = {
        'properties': {
            'en': "Here are our available properties. This feature is coming soon.",
            'es': "Aqu√≠ est√°n nuestras propiedades disponibles. Esta funci√≥n estar√° disponible pr√≥ximamente.",
            'de': "Hier sind unsere verf√ºgbaren Immobilien. Diese Funktion wird in K√ºrze verf√ºgbar sein.",
            'fr': "Voici nos propri√©t√©s disponibles. Cette fonctionnalit√© sera bient√¥t disponible.",
            'ru': "–í–æ—Ç –Ω–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞."
        },
        'contact': {
            'en': "Contact our team. This feature is coming soon.",
            'es': "Contacte a nuestro equipo. Esta funci√≥n estar√° disponible pr√≥ximamente.",
            'de': "Kontaktieren Sie unser Team. Diese Funktion wird in K√ºrze verf√ºgbar sein.",
            'fr': "Contactez notre √©quipe. Cette fonctionnalit√© sera bient√¥t disponible.",
            'ru': "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞."
        },
        'faq': {
            'en': "Frequently Asked Questions. This feature is coming soon.",
            'es': "Preguntas Frecuentes. Esta funci√≥n estar√° disponible pr√≥ximamente.",
            'de': "H√§ufig gestellte Fragen. Diese Funktion wird in K√ºrze verf√ºgbar sein.",
            'fr': "Foire Aux Questions. Cette fonctionnalit√© sera bient√¥t disponible.",
            'ru': "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞."
        },
        'news': {
            'en': "Latest news. This feature is coming soon.",
            'es': "√öltimas noticias. Esta funci√≥n estar√° disponible pr√≥ximamente.",
            'de': "Neueste Nachrichten. Diese Funktion wird in K√ºrze verf√ºgbar sein.",
            'fr': "Derni√®res actualit√©s. Cette fonctionnalit√© sera bient√¥t disponible.",
            'ru': "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞."
        }
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    message = messages.get(page, {}).get(language, "Feature coming soon.")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    back_button_text = {
        'en': "üîô Back to Main Menu",
        'es': "üîô Volver al Men√∫ Principal",
        'de': "üîô Zur√ºck zum Hauptmen√º",
        'fr': "üîô Retour au Menu Principal",
        'ru': "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é"
    }
    
    keyboard = [[InlineKeyboardButton(back_button_text.get(language, "üîô Back"), callback_data=f"lang_{language}_main")]]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
    keyboard.extend(create_language_buttons())
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_key = f"{page}_{language}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
    is_channel = query.message.chat.type == 'channel' or (
        query.message.chat.username and CHANNEL_ID.replace("@", "") == query.message.chat.username
    )
    
    if is_channel:
        # –î–ª—è –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ —Ñ–æ—Ç–æ
        chat_id = CHANNEL_ID
        old_message_id = query.message.message_id
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (–±–µ–∑ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥–º–µ–Ω—é)
        await send_menu_update(
            context=context,
            chat_id=chat_id,
            old_message_id=old_message_id,
            content=message,
            keyboard=keyboard,
            message_key=message_key,
            use_photo=False  # –ü–æ–¥–º–µ–Ω—é –≤—Å–µ–≥–¥–∞ –±–µ–∑ —Ñ–æ—Ç–æ
        )
    else:
        # –≠—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text
        try:
            await query.edit_message_text(
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            await query.message.reply_text(
                text=message, 
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )