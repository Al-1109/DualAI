import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ utils
from utils import (
    send_to_channel, 
    CHANNEL_ID, 
    load_content_file, 
    save_message_ids, 
    load_message_ids,
    clean_all_channel_messages,
    send_photo_to_channel
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
def create_language_buttons():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    return [
        [
            InlineKeyboardButton("üá¨üáß", callback_data="lang_en_current"),
            InlineKeyboardButton("üá™üá∏", callback_data="lang_es_current"),
            InlineKeyboardButton("üá©üá™", callback_data="lang_de_current"),
            InlineKeyboardButton("üá´üá∑", callback_data="lang_fr_current"),
            InlineKeyboardButton("üá∑üá∫", callback_data="lang_ru_current"),
        ]
    ]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
def create_menu_keyboard(language):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ"""
    if language == 'en':
        keyboard = [
            [InlineKeyboardButton("üè† Properties", callback_data="menu_properties")],
            [InlineKeyboardButton("üìù Contact us", callback_data="menu_contact")],
            [InlineKeyboardButton("‚ùì FAQ", callback_data="menu_faq")],
            [InlineKeyboardButton("üì∞ News", callback_data="menu_news")],
        ]
    elif language == 'es':
        keyboard = [
            [InlineKeyboardButton("üè† Propiedades", callback_data="menu_properties")],
            [InlineKeyboardButton("üìù Cont√°ctenos", callback_data="menu_contact")],
            [InlineKeyboardButton("‚ùì FAQ", callback_data="menu_faq")],
            [InlineKeyboardButton("üì∞ Noticias", callback_data="menu_news")],
        ]
    elif language == 'de':
        keyboard = [
            [InlineKeyboardButton("üè† Immobilien", callback_data="menu_properties")],
            [InlineKeyboardButton("üìù Kontakt", callback_data="menu_contact")],
            [InlineKeyboardButton("‚ùì FAQ", callback_data="menu_faq")],
            [InlineKeyboardButton("üì∞ Nachrichten", callback_data="menu_news")],
        ]
    elif language == 'fr':
        keyboard = [
            [InlineKeyboardButton("üè† Propri√©t√©s", callback_data="menu_properties")],
            [InlineKeyboardButton("üìù Contactez-nous", callback_data="menu_contact")],
            [InlineKeyboardButton("‚ùì FAQ", callback_data="menu_faq")],
            [InlineKeyboardButton("üì∞ Actualit√©s", callback_data="menu_news")],
        ]
    elif language == 'ru':
        keyboard = [
            [InlineKeyboardButton("üè† –û–±—ä–µ–∫—Ç—ã", callback_data="menu_properties")],
            [InlineKeyboardButton("üìù –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="menu_contact")],
            [InlineKeyboardButton("‚ùì FAQ", callback_data="menu_faq")],
            [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="menu_news")],
        ]
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        keyboard = [
            [InlineKeyboardButton("üè† Properties", callback_data="menu_properties")],
            [InlineKeyboardButton("üìù Contact us", callback_data="menu_contact")],
            [InlineKeyboardButton("‚ùì FAQ", callback_data="menu_faq")],
            [InlineKeyboardButton("üì∞ News", callback_data="menu_news")],
        ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å –º–µ–Ω—é
    keyboard.extend(create_language_buttons())
    
    return keyboard

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
    welcome_message = load_content_file("Telegram_content/welcome_message.md")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    keyboard = [
        [
            InlineKeyboardButton("üá¨üáß English", callback_data="lang_en_main"),
            InlineKeyboardButton("üá™üá∏ Espa√±ol", callback_data="lang_es_main"),
        ],
        [
            InlineKeyboardButton("üá©üá™ Deutsch", callback_data="lang_de_main"),
            InlineKeyboardButton("üá´üá∑ Fran√ßais", callback_data="lang_fr_main"),
        ],
        [
            InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru_main"),
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['current_page'] = 'welcome'
    
    # –ü—É—Ç—å –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    welcome_image_path = "media/images/photo.jpg"
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –ø–æ–¥–ø–∏—Å–∏
        with open(welcome_image_path, "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=welcome_message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            text=welcome_message,
            reply_markup=reply_markup
        )

async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ —Ä–µ–∂–∏–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
    callback_parts = query.data.split('_')
    language = callback_parts[1]
    mode = callback_parts[2] if len(callback_parts) > 2 else 'main'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['language'] = language
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_page = context.user_data.get('current_page', 'welcome')
    
    # –ï—Å–ª–∏ —Ä–µ–∂–∏–º 'current', —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if mode == 'current':
        # –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø–æ–¥–º–µ–Ω—é, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if current_page in ['properties', 'contact', 'faq', 'news']:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
            await show_submenu_page(query, context, current_page, language)
            return
    
    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    menu_content = load_content_file(f"Telegram_content/{language}/main_menu.md")
    keyboard = create_menu_keyboard(language)
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    context.user_data['current_page'] = 'main_menu'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
    is_channel = False
    if query.message.chat.type == 'channel':
        is_channel = True
    elif query.message.chat.username and CHANNEL_ID.replace("@", "") == query.message.chat.username:
        is_channel = True
    
    if is_channel:
        # –ü–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ –∫–∞–Ω–∞–ª, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        # –≠—Ç–æ –Ω–µ –≤—ã–±—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        try:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, –Ω–∞–º –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
            if query.message.photo:
                message_ids = load_message_ids()
                language_image_path = "media/images/photo.jpg"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                with open(language_image_path, "rb") as photo_file:
                    message = await context.bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=photo_file,
                        caption=menu_content,
                        reply_markup=reply_markup,
                        parse_mode="Markdown",
                        disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_key = f"main_menu_{language}"
                message_ids[message_key] = message.message_id
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
                if "all_messages" not in message_ids:
                    message_ids["all_messages"] = []
                
                if message.message_id not in message_ids["all_messages"]:
                    message_ids["all_messages"].append(message.message_id)
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
                # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
                try:
                    old_message_id = query.message.message_id
                    await context.bot.delete_message(
                        chat_id=CHANNEL_ID,
                        message_id=old_message_id
                    )
                    
                    # –£–¥–∞–ª—è–µ–º ID –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if old_message_id in message_ids["all_messages"]:
                        message_ids["all_messages"].remove(old_message_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ID
                save_message_ids(message_ids)
            else:
                # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.edit_message_text(
                    text=menu_content,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_to_channel –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            await send_to_channel(context, menu_content, reply_markup, f"main_menu_{language}")
    else:
        # –≠—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            if query.message.photo:
                welcome_image_path = "media/images/photo.jpg"
                with open(welcome_image_path, "rb") as photo:
                    await query.message.reply_photo(
                        photo=photo,
                        caption=menu_content,
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
                await query.message.delete()
            else:
                # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                await query.edit_message_text(
                    text=menu_content,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await query.message.reply_text(
                text=menu_content,
                reply_markup=reply_markup
            )

async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    menu_item = query.data.split('_')[1]
    language = context.user_data.get('language', 'en')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['current_page'] = menu_item
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_submenu_page(query, context, menu_item, language)

async def show_submenu_page(query, context, page, language):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
    messages = {
        'properties': {
            'en': "Here are our available properties. This feature is coming soon.",
            'es': "Aqu√≠ est√°n nuestras propiedades disponibles. Esta funci√≥n estar√° disponible pr√≥ximamente.",
            'de': "Hier sind unsere verf√ºgbaren Immobilien. Diese Funktion wird in K√ºrze verf√ºgbar sein.",
            'fr': "Voici nos propri√©t√©s disponibles. Cette fonctionnalit√© sera bient√¥t disponible.",
            'ru': "–í–æ—Ç –Ω–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞."
        },
        'contact': {
            'en': "Contact our team. This feature is coming soon.",
            'es': "Contacte a nuestro equipo. Esta funci√≥n estar√° disponible pr√≥ximamente.",
            'de': "Kontaktieren Sie unser Team. Diese Funktion wird in K√ºrze verf√ºgbar sein.",
            'fr': "Contactez notre √©quipe. Cette fonctionnalit√© sera bient√¥t disponible.",
            'ru': "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞."
        },
        'faq': {
            'en': "Frequently Asked Questions. This feature is coming soon.",
            'es': "Preguntas Frecuentes. Esta funci√≥n estar√° disponible pr√≥ximamente.",
            'de': "H√§ufig gestellte Fragen. Diese Funktion wird in K√ºrze verf√ºgbar sein.",
            'fr': "Foire Aux Questions. Cette fonctionnalit√© sera bient√¥t disponible.",
            'ru': "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞."
        },
        'news': {
            'en': "Latest news. This feature is coming soon.",
            'es': "√öltimas noticias. Esta funci√≥n estar√° disponible pr√≥ximamente.",
            'de': "Neueste Nachrichten. Diese Funktion wird in K√ºrze verf√ºgbar sein.",
            'fr': "Derni√®res actualit√©s. Cette fonctionnalit√© sera bient√¥t disponible.",
            'ru': "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞."
        }
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    message = messages.get(page, {}).get(language, "Feature coming soon.")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    back_button_text = {
        'en': "üîô Back to Main Menu",
        'es': "üîô Volver al Men√∫ Principal",
        'de': "üîô Zur√ºck zum Hauptmen√º",
        'fr': "üîô Retour au Menu Principal",
        'ru': "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é"
    }
    
    keyboard = [[InlineKeyboardButton(back_button_text.get(language, "üîô Back"), callback_data=f"lang_{language}_main")]]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
    keyboard.extend(create_language_buttons())
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_key = f"{page}_{language}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
    is_channel = False
    if query.message.chat.type == 'channel':
        is_channel = True
    elif query.message.chat.username and CHANNEL_ID.replace("@", "") == query.message.chat.username:
        is_channel = True
    
    if is_channel:
        # –î–ª—è –∫–∞–Ω–∞–ª–∞: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
        try:
            message_ids = load_message_ids()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message = await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=message,
                reply_markup=reply_markup,
                disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_ids[message_key] = new_message.message_id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            if "all_messages" not in message_ids:
                message_ids["all_messages"] = []
            
            if new_message.message_id not in message_ids["all_messages"]:
                message_ids["all_messages"].append(new_message.message_id)
            
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
            old_message_id = query.message.message_id
            if old_message_id != new_message.message_id:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    await context.bot.delete_message(
                        chat_id=CHANNEL_ID,
                        message_id=old_message_id
                    )
                    
                    # –£–¥–∞–ª—è–µ–º ID –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if old_message_id in message_ids["all_messages"]:
                        message_ids["all_messages"].remove(old_message_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ID
            save_message_ids(message_ids)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
            # –ö–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            await send_to_channel(context, message, reply_markup, message_key)
    else:
        # –≠—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        await query.edit_message_text(text=message, reply_markup=reply_markup)