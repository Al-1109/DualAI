name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        pytest
    
    - name: Run linting
      run: |
        flake8 .
        black . --check

# Временно отключены для отладки базового CI
#  issue-automation:
#    needs: test
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v2
#    
#    - name: Create Issue
#      uses: actions/github-script@v6
#      with:
#        script: |
#          const issue = await github.rest.issues.create({
#            owner: context.repo.owner,
#            repo: context.repo.repo,
#            title: '[CI] Test Results',
#            body: `## Test Results\n\nAll tests passed successfully! 🎉\n\n### Details:\n- Branch: ${context.ref}\n- Commit: ${context.sha}\n- Run: ${context.runId}`,
#            labels: ['ci', 'test-results']
#          });
#
#  update-project-status:
#    needs: test
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v2
#    
#    - name: Update Project Status
#      uses: actions/github-script@v6
#      with:
#        script: |
#          const project = await github.rest.projects.listForOrg({
#            org: context.repo.owner
#          });
#          
#          if (project.data.length > 0) {
#            await github.rest.projects.update({
#              project_id: project.data[0].id,
#              name: 'DualAI Development',
#              body: `Last updated: ${new Date().toISOString()}`
#            });
#          }
#
#  create-release:
#    needs: test
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main'
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#    
#    - name: Create Release
#      uses: actions/github-script@v6
#      with:
#        script: |
#          const tag = `v${new Date().toISOString().split('T')[0]}`;
#          await github.rest.repos.createRelease({
#            owner: context.repo.owner,
#            repo: context.repo.repo,
#            tag_name: tag,
#            name: `Release ${tag}`,
#            body: 'Automated release created by CI/CD pipeline'
#          }); 