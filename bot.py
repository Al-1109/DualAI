import os
import logging
import asyncio  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.error import TelegramError
import hmac
from http.server import BaseHTTPRequestHandler
import json
from http import HTTPStatus

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
from utils import load_message_ids, save_message_ids, load_content_file, send_to_channel, CHANNEL_ID, clean_all_channel_messages, send_photo_to_channel

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from handlers.client import start_command, language_callback, menu_callback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞–µ–º (—Ç–µ—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω)
IS_TEST_ENV = os.getenv("VERCEL_ENV") == "preview"
BOT_TOKEN = os.getenv("TEST_TELEGRAM_BOT_TOKEN") if IS_TEST_ENV else os.getenv("TELEGRAM_BOT_TOKEN")
BOT_USERNAME = os.getenv("TEST_TELEGRAM_BOT_USERNAME") if IS_TEST_ENV else None
WEBHOOK_SECRET = os.getenv("TEST_WEBHOOK_SECRET") if IS_TEST_ENV else None

if not BOT_TOKEN:
    raise ValueError("Bot token not configured. Please set TEST_TELEGRAM_BOT_TOKEN for test environment or TELEGRAM_BOT_TOKEN for production.")

# –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
logger.info(f"Running in {'TEST' if IS_TEST_ENV else 'PRODUCTION'} environment")
logger.info(f"Using bot username: {BOT_USERNAME if BOT_USERNAME else 'Not configured'}")
logger.info(f"Webhook secret configured: {bool(WEBHOOK_SECRET)}")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—É—Ç–µ–π
WELCOME_IMAGE_PATH = "media/images/photo.jpg"

# Initialize the application globally
application = Application.builder().token(BOT_TOKEN).build()

async def send_welcome_to_channel(context):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö.
    –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è, –Ω–æ —è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –≤ –∫–∞–Ω–∞–ª–µ.
    """
    logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É...")
    welcome_message = load_content_file("Telegram_content/welcome_message.md")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    bot_username = context.bot.username
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
    keyboard = [
        [
            InlineKeyboardButton("üá¨üáß Start in English", url=f"https://t.me/{bot_username}?start=lang_en"),
            InlineKeyboardButton("üá™üá∏ Comenzar en Espa√±ol", url=f"https://t.me/{bot_username}?start=lang_es"),
        ],
        [
            InlineKeyboardButton("üá©üá™ Auf Deutsch starten", url=f"https://t.me/{bot_username}?start=lang_de"),
            InlineKeyboardButton("üá´üá∑ Commencer en Fran√ßais", url=f"https://t.me/{bot_username}?start=lang_fr"),
        ],
        [
            InlineKeyboardButton("üá∑üá∫ –ù–∞—á–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º", url=f"https://t.me/{bot_username}?start=lang_ru"),
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
    message_ids = load_message_ids()
    for msg_id in message_ids.get("all_messages", []):
        try:
            await context.bot.delete_message(chat_id=CHANNEL_ID, message_id=msg_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}")
            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è API
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    try:
        with open(WELCOME_IMAGE_PATH, "rb") as photo:
            message = await context.bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=photo,
                caption=welcome_message,
                reply_markup=reply_markup,
                parse_mode="Markdown",
                disable_notification=True
            )
            
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            message_ids = {"welcome_message": message.message_id, "welcome_has_photo": True, "all_messages": [message.message_id]}
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=welcome_message,
            reply_markup=reply_markup,
            parse_mode="Markdown",
            disable_notification=True
        )
        message_ids = {"welcome_message": message.message_id, "welcome_has_photo": False, "all_messages": [message.message_id]}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ)
    save_message_ids(message_ids)
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: {message.message_id})")
    return message.message_id

async def admin_send_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª."""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # if update.effective_user.id != ADMIN_ID:
    #     await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    #     return
    
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª...")
    await send_welcome_to_channel(context)
    await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")

async def startup(app):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª")
        await send_welcome_to_channel(app)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info(f"Bot started in {ENVIRONMENT} environment")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ /sendtochannel –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ OpenAI
    user_language = context.user_data.get('language', 'en')
    
    await update.message.reply_text(
        f"–í –±—É–¥—É—â–µ–º —è —Å–º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é."
    )

def verify_telegram_request(request_headers, request_body):
    """Verify that the request is from Telegram using the secret token."""
    if not WEBHOOK_SECRET:
        logger.warning("Webhook secret not configured")
        return True  # Allow all requests if secret is not configured
        
    token = request_headers.get('X-Telegram-Bot-Api-Secret-Token')
    if not token:
        logger.warning("No secret token in request headers")
        return False
        
    if not hmac.compare_digest(token, WEBHOOK_SECRET):
        logger.warning("Invalid secret token")
        return False
        
    return True

# Register handlers
application.add_handler(CommandHandler("start", start_command))
application.add_handler(CommandHandler("sendtochannel", admin_send_to_channel))
application.add_handler(CallbackQueryHandler(language_callback, pattern=r'^lang_'))
application.add_handler(CallbackQueryHandler(menu_callback, pattern=r'^menu_'))

# Admin handlers
from handlers import admin
application.add_handler(CallbackQueryHandler(admin.admin_panel_callback, pattern=r'^admin_panel$'))
application.add_handler(CallbackQueryHandler(admin.admin_content_management, pattern=r'^admin_content$'))
application.add_handler(CallbackQueryHandler(admin.admin_statistics, pattern=r'^admin_stats$'))
application.add_handler(CallbackQueryHandler(admin.admin_notifications, pattern=r'^admin_notifications$'))
application.add_handler(CallbackQueryHandler(admin.admin_back_to_main, pattern=r'^admin_back_to_main$'))

# Test handlers (only in test environment)
if IS_TEST_ENV:
    application.add_handler(CallbackQueryHandler(admin.admin_test_commands, pattern=r'^admin_test_commands$'))
    application.add_handler(CallbackQueryHandler(admin.admin_test_refresh, pattern=r'^admin_test_refresh$'))
    application.add_handler(CallbackQueryHandler(admin.admin_test_send, pattern=r'^admin_test_send$'))
    application.add_handler(CommandHandler("test", lambda update, context: update.message.reply_text("Test command received!")))
    application.add_handler(CommandHandler("env", lambda update, context: update.message.reply_text(
        f"Environment: {'TEST' if IS_TEST_ENV else 'PRODUCTION'}\nVercel: {'YES' if os.getenv('VERCEL') else 'NO'}"
    )))
    application.add_handler(CommandHandler("ping", lambda update, context: update.message.reply_text("Pong! üèì")))
    application.add_handler(CommandHandler("echo", lambda update, context: update.message.reply_text(
        " ".join(context.args) if context.args else "Usage: /echo [text]"
    )))

# Unknown command handler
application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

# Text message handler
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# Add startup function
application.post_init = startup

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """Handle GET requests - return a simple status message."""
        self.send_response(HTTPStatus.OK)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        response = {'status': 'ok', 'message': 'Webhook is ready'}
        self.wfile.write(json.dumps(response).encode())

    def do_POST(self):
        """Handle POST requests from Telegram."""
        content_length = int(self.headers.get('Content-Length', 0))
        request_body = self.rfile.read(content_length).decode()
        
        # Verify the request is from Telegram
        if not verify_telegram_request(self.headers, request_body):
            self.send_response(HTTPStatus.UNAUTHORIZED)
            self.end_headers()
            return

        try:
            # Initialize the application before processing updates
            async def process_update_async():
                await application.initialize()
                update = Update.de_json(json.loads(request_body), application.bot)
                await application.process_update(update)
                await application.shutdown()
            
            asyncio.run(process_update_async())
            
            self.send_response(HTTPStatus.OK)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            response = {'status': 'ok'}
            self.wfile.write(json.dumps(response).encode())
            
        except Exception as e:
            logger.error(f"Error processing update: {e}")
            self.send_response(HTTPStatus.INTERNAL_SERVER_ERROR)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            response = {'status': 'error', 'message': str(e)}
            self.wfile.write(json.dumps(response).encode())

if __name__ == "__main__":
    main()